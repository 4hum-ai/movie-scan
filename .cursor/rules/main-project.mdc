---
description: 'Main project rules for movie-scan Vue.js application with mandatory workflow and architecture'
globs: ['**/*']
alwaysApply: true
---

# Cursor Rules for Movie Scan Project

## 1. MANDATORY Development Workflow for AI

**ðŸš¨ CRITICAL: NO EXCEPTIONS - HUMAN APPROVAL REQUIRED FOR ALL WORK**

### Workflow Steps (MUST BE FOLLOWED IN ORDER):

1. **ðŸ“‹ PLAN PHASE** (MANDATORY - NO IMPLEMENTATION WITHOUT THIS)
   - Create detailed plan with todos using `todo_write` tool
   - Break down task into specific, actionable items
   - Include estimated complexity and dependencies
   - Present plan to human for approval
   - **WAIT FOR EXPLICIT HUMAN APPROVAL** before proceeding

2. **âœ… APPROVAL CHECKPOINT** (MANDATORY)
   - Human must explicitly approve the plan
   - If human requests changes, revise plan and re-present
   - Only proceed to implementation after receiving approval

3. **ðŸ”¨ IMPLEMENT PHASE** (Only after approval)
   - Follow the coding conventions and architecture patterns outlined below
   - Update todos as work progresses
   - Mark completed todos as done
   - **COMMIT CHECKPOINT**: Commit implementation changes before proceeding

4. **ðŸ§ª TEST PHASE** (If needed)
   - Add unit tests for new functionality when appropriate
   - Update todos to reflect testing status
   - **COMMIT CHECKPOINT**: Commit test changes before proceeding

5. **ðŸ“š DOCS PHASE** (If needed)
   - Update relevant documentation if changes affect system architecture or usage
   - Update todos to reflect documentation status
   - **COMMIT CHECKPOINT**: Commit documentation changes before proceeding

6. **ðŸ’¾ FINAL COMMIT PHASE** (MANDATORY - NO EXCEPTIONS)
   - Create descriptive commit message following conventional commit format
   - Push to github
   - **VERIFY COMMIT SUCCESS**: Confirm commit was pushed successfully
   - **WORKFLOW COMPLETE**: Only mark work as finished after successful commit

### Commit Requirements & Validation

#### Commit Message Format (MANDATORY)

- Follow conventional commit format: `type(scope): description`
- Examples: `feat(ui): add new form component`, `fix(auth): resolve login validation issue`
- Include detailed description in commit body when needed
- Reference issue numbers when applicable

#### Commit Validation Checklist

- [ ] All changes are staged and ready to commit
- [ ] Commit message follows conventional format
- [ ] Commit is pushed to remote repository
- [ ] Push was successful (no errors)
- [ ] All phases of work are properly committed
- [ ] Work is not marked complete until commit verification

#### Commit Enforcement Rules

- **NO EXCEPTIONS**: Every phase must end with a successful commit
- **VERIFICATION REQUIRED**: Always confirm commit success before proceeding
- **WORKFLOW BLOCKING**: Cannot proceed to next phase without commit
- **COMPLETION GATE**: Work is incomplete until final commit is verified